// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LocalVertexFactory.usf: Local vertex factory shader code.
=============================================================================*/

#include "VertexFactoryCommon.ush"
#include "LocalVertexFactoryCommon.ush"

#include "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"

#ifndef USE_INSTANCING
#define USE_INSTANCING 1
#endif

Buffer<float4> VertexFetch_PerInstanceTransformParameter;
Buffer<float> VertexFetch_PerInstanceScale;


/**
 * Per-vertex inputs from bound vertex buffers
 */
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;

	half3 TangentX : ATTRIBUTE1;
	// TangentZ.w contains sign of tangent basis determinant
	half4 TangentZ : ATTRIBUTE2;

	half4 Color : ATTRIBUTE3;

	float2 PackedTexCoords0 : ATTRIBUTE4;
	float2 PackedTexCoords1 : ATTRIBUTE5;
	//float2 PackedTexCoords2 : ATTRIBUTE6;
	float GPUDrivenInstanceIndex : ATTRIBUTE6;
	
	uint InstanceId : SV_InstanceID;
	
	uint VertexId : SV_VertexID;
};

/** 
 * Per-vertex inputs from bound vertex buffers.  Used by passes with a trimmed down position-only shader.
 */
struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;

	float GPUDrivenInstanceIndex : ATTRIBUTE1;
	
	uint InstanceId : SV_InstanceID;
	
	uint VertexId : SV_VertexID;
};


/** 
 * Per-vertex inputs from bound vertex buffers.  Used by passes with a trimmed down position-and-normal-only shader.
 */
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	
	//actually localfactory reads tangentz as normal with attribute index 2
	// search "StreamElements.Add(AccessStreamComponent(Data.TangentBasisComponents[1], 2, InputStreamType));"
	half4 TangentZ : ATTRIBUTE2;

	
	float GPUDrivenInstanceIndex : ATTRIBUTE3;
	
	uint InstanceId : SV_InstanceID;
	
	uint VertexId : SV_VertexID;
};

/** 
 * Caches intermediates that would otherwise have to be computed multiple times.  Avoids relying on the compiler to optimize out redundant operations.
 */
struct FVertexFactoryIntermediates
{
	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half TangentToWorldSign;
	int InstanceIndex;
	half4 Color;
	float InstanceScale;
	float4x4 InstanceCurrentFrameTransform;
	float4 PerInstanceParams;

	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
};

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData;
}

float4x4 GetInstanceTransform(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.InstanceCurrentFrameTransform;
}

float4x4 GetInstanceTransform(FPositionOnlyVertexFactoryInput Input)
{
	uint InstanceIndex = floor(Input.GPUDrivenInstanceIndex + 0.5f);
	float4 InstanceTransform0 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 0];
	float4 InstanceTransform1 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 1];
	float4 InstanceTransform2 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 2];
	float4 InstanceTransform3 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 3];
	
	return float4x4(InstanceTransform0,
	                InstanceTransform1,
					InstanceTransform2,
					InstanceTransform3
					);
}

float4x4 GetInstanceTransform(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	uint InstanceIndex = floor(Input.GPUDrivenInstanceIndex + 0.5f);
	float4 InstanceTransform0 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 0];
	float4 InstanceTransform1 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 1];
	float4 InstanceTransform2 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 2];
	float4 InstanceTransform3 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 3];
	
	return float4x4(InstanceTransform0,
	                InstanceTransform1,
					InstanceTransform2,
					InstanceTransform3
					);
}

half3x3 GetInstanceToLocal3x3(FVertexFactoryIntermediates Intermediates)
{
	return half3x3(Intermediates.InstanceCurrentFrameTransform[0].xyz, Intermediates.InstanceCurrentFrameTransform[1].xyz, Intermediates.InstanceCurrentFrameTransform[2].xyz);
}

float2 GetInstanceShadowMapBias(FVertexFactoryIntermediates Intermediates)
{
	return 0.0f.xx;
}

float2 GetInstanceLightMapBias(FVertexFactoryIntermediates Intermediates)
{
	return 0.0f.xx;
}

float GetInstanceSelected(FVertexFactoryIntermediates Intermediates)
{
	return 0.0f;
}

float GetInstanceRandom(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.InstanceCurrentFrameTransform[3].x;
}

float3 GetInstanceOrigin(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.InstanceCurrentFrameTransform[3].xyz;
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for( int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#endif

	half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	// Required for previewing materials that use ParticleColor
	Result.Particle.Color = half4(1, 1, 1, 1);
#if USE_INSTANCING
	Result.PerInstanceParams = Interpolants.PerInstanceParams;
#endif

	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	Result.TwoSidedSign = 1;
	Result.PrimitiveId = 0;

	return Result;
}

half3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 LocalToWorld = half3x3(Intermediates.InstanceCurrentFrameTransform[0].xyz, Intermediates.InstanceCurrentFrameTransform[1].xyz, Intermediates.InstanceCurrentFrameTransform[2].xyz);
	// The instance scale is determined by "const FVector Scale = RandomScale ? GetRandomScale() : FVector(1);"
	// Search this if you have doubt
	half3 InvScale = Intermediates.InstanceScale.xxx;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld);
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, half3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters) 0;
	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;

	// does not handle instancing!
	Result.TangentToWorld = Intermediates.TangentToWorld;

	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);

	// As the transform passed in is already global world transform
	// There's no need to multiple by the primitve's transform
	float4x4 InstanceToLocal = GetInstanceTransform(Intermediates);
	Result.InstanceLocalToWorld = LWCMultiply(InstanceToLocal, PrimitiveData.LocalToWorld);
	Result.InstanceLocalPosition = Input.Position.xyz;
	Result.PerInstanceParams = Intermediates.PerInstanceParams;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2]; //Input.TangentZ.xyz * 2.f - 1.f;
	Result.TexCoords[0] = Input.PackedTexCoords0.xy;
#if NUM_MATERIAL_TEXCOORDS_VERTEX > 1
	Result.TexCoords[1] = Input.PackedTexCoords1.xy;
#endif
#endif
	Result.PrimitiveId = 0;
	return Result;
}

#if USE_INSTANCING
float4 CalcWorldPosition(float4 Position, float4x4 InstanceTransform, uint PrimitiveId)
#else
float4 CalcWorldPosition(float4 Position, uint PrimitiveId)
#endif	// USE_INSTANCING
{
	float3 WorldPosition = mul(Position, InstanceTransform).xyz;

#if USE_INSTANCING
	return float4(WorldPosition.xyz + LWCHackToFloat(ResolvedView.PreViewTranslation).xyz, 1.0);
#else
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);
#endif
}
#if USE_INSTANCING
half3x3 CalcTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float TangentSign)
#else
half3x3 CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
#endif
{
	half3x3 Result;
	
	half3 TangentInputX = Input.TangentX;
	half4 TangentInputZ = Input.TangentZ;

	half3 TangentX = TangentBias(TangentInputX);
	half4 TangentZ = TangentBias(TangentInputZ);
	TangentSign = TangentZ.w;

	// derive the binormal by getting the cross product of the normal and tangent
	half3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

half3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
#if USE_INSTANCING
	half3x3 InstanceToWorld = (half3x3)Intermediates.InstanceCurrentFrameTransform;
	// remove scaling
	InstanceToWorld[0] = normalize(InstanceToWorld[0]);
	InstanceToWorld[1] = normalize(InstanceToWorld[1]);
	InstanceToWorld[2] = normalize(InstanceToWorld[2]);
	half3x3 TangentToWorld = mul(TangentToLocal, InstanceToWorld);
#else
	half3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
#endif	// USE_INSTANCING
	return TangentToWorld;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	Intermediates.Color = Input.Color FCOLOR_COMPONENT_SWIZZLE; // Swizzle vertex color.

	uint InstanceIndex = floor(Input.GPUDrivenInstanceIndex + 0.5f);

	float4 InstanceTransform0 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 0];
	float4 InstanceTransform1 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 1];
	float4 InstanceTransform2 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 2];
	float4 InstanceTransform3 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 3];
	
	Intermediates.InstanceScale = VertexFetch_PerInstanceScale[InstanceIndex];
	Intermediates.InstanceCurrentFrameTransform = float4x4(
		                                                    InstanceTransform0,
		                                                    InstanceTransform1,
		                                                    InstanceTransform2,
		                                                    InstanceTransform3);



	Intermediates.PerInstanceParams = float4(1.0f, 1.0f, 1.0f, 0.0f);
	Intermediates.InstanceIndex = InstanceIndex;

   
	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, Intermediates, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetInstanceData(Intermediates).DeterminantSign;

	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
half3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input.Position, Intermediates.InstanceCurrentFrameTransform, 0);
}



float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	// Initialize the whole struct to 0
	// Really only the last two components of the packed UVs have the opportunity to be uninitialized
	Interpolants = (FVertexFactoryInterpolantsVSToPS) 0;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);
	
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}

#endif

	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);
#if USE_INSTANCING
	Interpolants.PerInstanceParams = Intermediates.PerInstanceParams;
#endif

#if INSTANCED_STEREO
	Interpolants.PackedEyeIndex = 0;
#endif

	//The gpudriven instance share one primitive, which is located at world origin with identity rotation
	SetPrimitiveId(Interpolants, 0);

	return Interpolants;
}

/** for depth-only pass */
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;
	return CalcWorldPosition(Position, GetInstanceTransform(Input), 0);
}

/** for depth-only pass (slope depth bias) */
float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;
	
	return CalcWorldPosition(Position, GetInstanceTransform(Input), 0);
}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	uint InstanceIndex = floor(Input.GPUDrivenInstanceIndex + 0.5f);
	float4 InstanceTransform0 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 0];
	float4 InstanceTransform1 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 1];
	float4 InstanceTransform2 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 2];
	float4 InstanceTransform3 = VertexFetch_PerInstanceTransformParameter[InstanceIndex * 4 + 3];
	
	float4x4 InstanceTransform = float4x4(
											InstanceTransform0,
											InstanceTransform1,
											InstanceTransform2,
											InstanceTransform3
										);
	
	half3x3 InstanceTransform33 = (half3x3) InstanceTransform;
	
	return mul(Input.TangentZ.xyz, InstanceTransform33);
}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}

// Information when using pass through to get the previous position, as no matrix is available/needed

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3 WorldPosition = mul(Input.Position, Intermediates.InstanceCurrentFrameTransform).xyz;
	return float4(WorldPosition + LWCHackToFloat(ResolvedView.PrevPreViewTranslation).xyz, 1.0f);
}

#if USE_INSTANCING
float4 VertexFactoryGetInstanceHitProxyId(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return float4(0.0, 0.0, 0.0, 0);
}
#endif	// USE_INSTANCING

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float4 ObjectWorldPositionAndRadius = GetPrimitiveData(GetPrimitiveId(Interpolants)).ObjectWorldPositionAndRadius;
	return float4(ObjectWorldPositionAndRadius.xyz + LWCHackToFloat(ResolvedView.PreViewTranslation).xyz, ObjectWorldPositionAndRadius.w);
}
uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

#include "VertexFactoryDefaultInterface.ush"