#include "/Engine/Public/Platform.ush"

#define THREAD_COUNT 512

float4x4 ProjMatrix;

float FoliageMaxScreenSize;
float FoliageScreenSizeBias;
float FoliageScreenSizeScale;

uint AllPatchNum;
Buffer<float4> AllPatchInfoBuffer;

Buffer<uint> PatchCountOffsetBuffer;
Buffer<uint> GPUUnCulledInstanceNum;

RWBuffer<uint> RWIndirectDrawBuffer;

RWBuffer<uint> RWPatchCountBuffer;
RWBuffer<uint> RWPatchCountOffsetBuffer;

uint AllInstanceIndexNum;
RWBuffer<float> RWInstanceIndiceBuffer;
RWBuffer<uint> RWIndirectDrawDispatchIndiretBuffer;
RWBuffer<uint> RWPatchCountCopyBuffer;
RWBuffer<uint> RWNextPatchCountOffsetBuffer;

//For Debugging
RWBuffer<uint> RWDrawedTriangleCountBuffer;

#ifndef ENABLE_LITE_GPU_SCENE_DEBUG
#define  ENABLE_LITE_GPU_SCENE_DEBUG 0
#endif

float3 CalcBoundExtent(float3 extent, float4x4 M)
{
	float4 ret = 0;
	
	ret = abs(float4(extent.x, extent.x, extent.x, extent.x) * M[0]);
	
	ret += abs(float4(extent.y, extent.y, extent.y, extent.y) * M[1]);
	
	ret += abs(float4(extent.z, extent.z, extent.z, extent.z) * M[2]);
	
	return ret.xyz;
}

float CalcBoundSphereRadius(float radius, float3 extent, float4x4 M)
{
	float4 scale = 0;
	
	scale = M[0] * M[0];
	
	scale += M[1] * M[1];
	
	scale += M[2] * M[2];
	
	float radiusScale2 = max(max(scale.x, scale.y), scale.z);
	
	float BoxExtendMagnitude = sqrt(dot(extent, extent));
	return max(sqrt(radiusScale2) * radius, BoxExtendMagnitude);
}
float ComputeBoundsDrawDistance(float ScreenSize, float SphereRadius, float4x4 InProjMatrix)
{
	float ScreenMultiple = max(0.5f * InProjMatrix[0][0], 0.5f * InProjMatrix[1][1]);
	
	float ScreenRadius = max(1.e-8f, ScreenSize * 0.5f);
	return (ScreenMultiple * SphereRadius) / ScreenRadius;
}

float ComputeBoundsScreenSize(float3 BoundOrigin, float SphereRadius, float3 InViewOrigin, float4x4 InProjMatrix)
{
	float Dist = distance(BoundOrigin, InViewOrigin);
	
	float ScreenMultiple = max(0.5f * InProjMatrix[0][0], 0.5f * InProjMatrix[1][1]);
	
	float ScreenRadius = ScreenMultiple * SphereRadius / max(1.0f, Dist);
	
	return ScreenRadius * 2.0f;
}

[numthreads(THREAD_COUNT, 1, 1)]
void ClearVisibleInstanceCS(
	uint3 DTid : SV_DispatchThreadID)
{
	
	const uint UniqueID = DTid.x;
	
	if (UniqueID < AllInstanceIndexNum)
	{
		RWInstanceIndiceBuffer[UniqueID] = -1;
	}
	
	if ( UniqueID < AllPatchNum)
	{
		RWPatchCountBuffer[UniqueID] = 0;
		RWPatchCountCopyBuffer[UniqueID] = 0;
		RWPatchCountOffsetBuffer[UniqueID] = 0;
	}
	
	if (UniqueID == 0)
	{
		float fStep = (float) THREAD_COUNT;
		
		RWIndirectDrawDispatchIndiretBuffer[0] = max(1u, (uint) ceil(GPUUnCulledInstanceNum[0] / fStep));
		RWIndirectDrawDispatchIndiretBuffer[1] = 1u;
		RWIndirectDrawDispatchIndiretBuffer[2] = 1u;
		
		RWNextPatchCountOffsetBuffer[0] = 0;
#if ENABLE_LITE_GPU_SCENE_DEBUG
		RWDrawedTriangleCountBuffer[0] = 0;
#endif
		
	}
}


Buffer<float> GPUUnCulledInstanceScreenSize;
Buffer<int> UnCulledInstanceBuffer;

float3 ViewLocation;
float3 ViewForward;


Buffer<uint> InstancePatchNumBuffer;
Buffer<uint> InstancePatchIDsBuffer;


Buffer<float4> RWInstanceTransformBuffer;
Buffer<uint> RWInstanceTypeBuffer;
Buffer<float4> AABBPatchBuffer;
Buffer<float4> RWInstanceScaleBuffer;

#ifndef Generate_Instance_Count_Pass
#define Generate_Instance_Count_Pass 0
#endif

int PerPatchMaxNum;
[numthreads(THREAD_COUNT, 1, 1)]
void GenerateInstanceIndiceCS(uint3 DTid : SV_DispatchThreadID)
{
	
	const uint UniqueID = DTid.x;
	const uint UnCulledInstanceNum = GPUUnCulledInstanceNum[0];
	if (UniqueID < UnCulledInstanceNum  )
	{
		const int InstanceID = UnCulledInstanceBuffer[UniqueID];
		float ScreenSize = min(GPUUnCulledInstanceScreenSize[InstanceID], FoliageMaxScreenSize);

		

		uint PatchStart = InstanceID * PerPatchMaxNum;
		uint PatchNum = InstancePatchNumBuffer[InstanceID];

		uint TypeIndex = RWInstanceTypeBuffer[InstanceID];
		
		
		float4 LocalAABBMin = AABBPatchBuffer[2 * TypeIndex + 0];
		float4 LocalAABBMax = AABBPatchBuffer[2 * TypeIndex + 1];
		
		float Radius = LocalAABBMin.w;
		float3 LocalAABBExtent = (LocalAABBMax.xyz - LocalAABBMin.xyz) / 2.0f;
		
		float4 InstanceTransform0 = RWInstanceTransformBuffer[InstanceID * 4 + 0];
		float4 InstanceTransform1 = RWInstanceTransformBuffer[InstanceID * 4 + 1];
		float4 InstanceTransform2 = RWInstanceTransformBuffer[InstanceID * 4 + 2];
		float4 InstanceTransform3 = RWInstanceTransformBuffer[InstanceID * 4 + 3];
		
		float4x4 InstanceTransform = float4x4(InstanceTransform0,
	                InstanceTransform1,
					InstanceTransform2,
					InstanceTransform3
					);
		
		float3 AABBExtent = CalcBoundExtent(LocalAABBExtent, InstanceTransform);
		
		Radius = CalcBoundSphereRadius(Radius, AABBExtent, InstanceTransform);
		
		float CameraDrawDistance = ComputeBoundsDrawDistance(ScreenSize, Radius, ProjMatrix);
			

		uint ID = 0;
		for (ID = 0; ID < PatchNum; ID++)
		{
			uint PatchID = InstancePatchIDsBuffer[PatchStart + ID];
			if (PatchID >= 0)
			{
				float4 PatchScreenSize = AllPatchInfoBuffer[2 * PatchID + 1];
				
				float ScreenSizeMin = PatchScreenSize.x*FoliageScreenSizeScale;
				if (ScreenSizeMin > 0)
				{
					ScreenSizeMin += FoliageScreenSizeBias;
				}
				float ScreenSizeMax = PatchScreenSize.y*FoliageScreenSizeScale + FoliageScreenSizeBias;
				float FarthestCameraDistance = ComputeBoundsDrawDistance(ScreenSizeMin, Radius, ProjMatrix);
				float ClosestCameraDistance = ComputeBoundsDrawDistance(ScreenSizeMax, Radius, ProjMatrix);
				
				
				if (CameraDrawDistance >= (ClosestCameraDistance) && CameraDrawDistance < (FarthestCameraDistance))
				{
					
#if Generate_Instance_Count_Pass > 0
					// Record the number that this patch needs to be rendered after culling
					// First we need to know the drawing offset of each type of patch
					// So this pass runs first
					InterlockedAdd(RWPatchCountCopyBuffer[PatchID], 1u);
#else
					// Now we can fill the instance id to correct position
					uint PatchInstanceIndexStart = PatchCountOffsetBuffer[PatchID];
					uint insert = 0;
					InterlockedAdd(RWPatchCountBuffer[PatchID], 1u, insert);
					RWInstanceIndiceBuffer[PatchInstanceIndexStart + insert] = (float) InstanceID;
#endif
					
				}
			}
		}
	}
}

Buffer<uint> PatchCountCopyBuffer;

[numthreads(THREAD_COUNT, 1, 1)]
void ComputeInstancePatchOffsetCS(
	uint3 DTid : SV_DispatchThreadID)
{
	const uint UniqueID = DTid.x;
	if (UniqueID < AllPatchNum)
	{
		uint PatchCount = PatchCountCopyBuffer[UniqueID];
		uint PatchStartOffset;
		InterlockedAdd(RWNextPatchCountOffsetBuffer[0], PatchCount, PatchStartOffset);
		RWPatchCountOffsetBuffer[UniqueID] = PatchStartOffset;
		
		uint PatchID = UniqueID;
		
		float4 PatchInfo = AllPatchInfoBuffer[2 * PatchID + 0];
		
		uint PatchIndexNum = (uint) floor(PatchInfo.y + 0.5f);
		// Index Count
		RWIndirectDrawBuffer[5 * PatchID + 0] = PatchIndexNum;
		// Instance Count
		RWIndirectDrawBuffer[5 * PatchID + 1] = PatchCount;
		// First Index
		RWIndirectDrawBuffer[5 * PatchID + 2] = (uint) floor(PatchInfo.x + 0.5f);
		// BaseVertexLocation
		RWIndirectDrawBuffer[5 * PatchID + 3] = (uint) floor(PatchInfo.z + 0.5f);
		// First Instance
		RWIndirectDrawBuffer[5 * PatchID + 4] = PatchStartOffset;
		
#if ENABLE_LITE_GPU_SCENE_DEBUG
		InterlockedAdd(RWDrawedTriangleCountBuffer[0], (PatchIndexNum / 3) * PatchCount);
#endif
	}
}


